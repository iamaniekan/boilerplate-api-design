openapi: 3.1.0
info:
  title: HNG Stage Three Tasks API
  description: This API provides endpoints to manage users, organisations, blog posts, payments, notifications, and messages. 
    It is designed based on the OpenAPI 3.1 specification and aims to demonstrate a well-structured API definition 
    using FastAPI as the backend framework.
  version: 1.0.0
servers:
  - url: http://api.domain.com/v1
tags:

  - name: Authentication
    description: Manage authentication and authorization.
  
  - name: Users
    description: Manage users. Requires authentication.
  
  - name: Organisations
    description: Manage organisations. Requires authentication.
    
  - name: User Organisation
    description: Manage user-organisation relationships. Requires authentication.
  
  - name: Payments
    description: Manage payments. Requires authentication.

  - name: Transactions
    description: Manage transactions. Requires authentication.

  - name: Posts
    description: Manage Blog post. Requires authentication.

  - name: Messages
    description: Manage messages. Requires authentication.

  - name: Notifications
    description: Manage Notifications. Requires authentication.

paths:
# Authentication
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: boolean
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /auth/login:
    post:
      summary: Log in a user and return a JWT token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Log out a user
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

# Users
  /users:
    get:
      summary: Get a list of users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{unique_id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: unique_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

# Organisation
  /organisations:
    get:
      summary: Get all organisations
      tags: [Organisations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of organisations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    post:
      summary: Create a new organisation
      tags: [Organisations]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationCreate'
      responses:
        '201':
          description: Organisation created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /organisations/{id}:
    get:
      summary: Get an organisation by ID
      tags: [Organisations]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: A single organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    put:
      summary: Update an existing organisation
      tags: [Organisations]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationCreate'
      responses:
        '200':
          description: Organisation updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    
    delete:
      summary: Delete an organisation by ID
      tags: [Organisations]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Organisation deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

# User_organisation
  /user_organisation:
    get:
      summary: Get a list of user-organisation relationships.
      tags: [User Organisation]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOrganisation'

    post:
      summary: Create a new user-organisation relationship.
      tags: [User Organisation]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserOrganisationCreate'
      responses:
        '201':
          description: User-organisation relationship created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOrganisation'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /user_organisation/{id}:
    get:
      summary: Get a user-organisation relationship by ID.
      tags: [User Organisation]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOrganisation'
        '404':
          description: User-organisation relationship not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    put:
      summary: Update an existing user-organisation relationship.
      tags: [User Organisation]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserOrganisationCreate'
      responses:
        '200':
          description: User-organisation relationship updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: User-organisation relationship not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    
    delete:
      summary: Delete a user-organisation relationship by ID.
      tags: [User Organisation]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User-organisation relationship deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User-organisation relationship not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
# Messages
  /messages:
      get:
        summary: Get a list of messages
        tags: [Messages]
        security:
          - bearerAuth: []
        responses:
          '200':
            description: A list of messages
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Messages'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
      post:
        summary: Create a new message
        tags: [Messages]
        security:
          - bearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
        responses:
          '201':
            description: Messages created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Messages'
          '400':
            description: Invalid input data
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
  /messages/{id}:
    get:
          summary: Get a messages by ID
          tags: [Messages]
          security:
            - bearerAuth: []
          parameters:
            - name: id
              in: path
              required: true
              schema:
                type: integer
          responses:
            '200':
              description: Messages details
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Messages'
            '404':
              description: Messages not found
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      error:
                        type: string

# Notifications

  /notifications:
    get:
      summary: Get a list of notifications
      tags: [Notifications]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notifications'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      summary: Create a new notification
      tags: [Notifications]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notifications'
      responses:
        '201':
          description: Notifications created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notifications'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /notifications/{id}:
    get:
      summary: Get a notification by ID
      tags: [Notifications]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Notifications details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notifications'
        '404':
          description: Notifications not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string


# Payment  
  /payments:
    get:
      summary: Get a list of payments
      tags: [Payments]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    post:
      summary: Create a new payment
      tags: [Payments]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreate'
      responses:
        '201':
          description: Payment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /payments/{id}:
    get:
      summary: Get a payment by ID
      tags: [Payments]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Payment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

# Transaction
  /transactions:
    get:
      summary: Get a list of transactions
      tags: [Transactions]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      summary: Create a new transaction
      tags: [Transactions]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /transactions/{id}:
    get:
      summary: Get a transaction by ID
      tags: [Transactions]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
# Post
  /posts:
    get:
      summary: Retrieve a list of posts
      tags: [Posts]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      tags: [Posts]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created

  /posts/{id}:
    get:
      summary: Retrieve a post by ID
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      summary: Update a post by ID
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated
    delete:
      summary: Delete a post by ID
      tags: [Posts]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Post deleted


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        unique_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Organisation:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    OrganisationCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    UserOrganisation:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: object
          properties:
            id:
              type: integer
            unique_id:
              type: string
            first_name:
              type: string
            last_name:
              type: string
            phone:
              type: string
            email:
              type: string
            password:
              type: string
            role:
              type: boolean
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        organisation_id:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            description:
              type: string
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    
    UserOrganisationCreate:
      type: object
      required:
        - user_id
        - organisation_id
      properties:
        user_id:
          type: integer
        organisation_id:
          type: integer
    
    Payment:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: string
        user_data:
          type: object
          properties:
            id:
              type: integer
            unique_id:
              type: string
            first_name:
              type: string
            last_name:
              type: string
            phone:
              type: string
            email:
              type: string
            password:
              type: string
            role:
              type: boolean
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        amount:
          type: number
          format: float
        payment_method:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
    
    PaymentCreate:
      type: object
      required:
        - user_id
        - amount
        - payment_method
        - status
      properties:
        user_id:
          type: integer
        amount:
          type: float
        payment_method:
          type: string
        status:
          type: string

    Transaction:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: string
        user_data:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
        amount:
          type: number
          format: float
        payment_method:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
          
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        body:
          type: string
        image:
          type: string
          format: binary
        status:
          type: string
        author_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

          
    Messages:
      type: object
      properties:
        id:
          type: integer
        sender_id:
          type: object
          properties:
            name:
              type: string

        receiver_id:
          type: object
          properties:
            name:
              type: string
        subject:
          type: string
        body:
          type: string
        sent_at:
          type: string
          format: date-time

    Notifications:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: string
        message_data:
          type: object
          properties:
            sender_id:
              type: object
              message_body:
                type: string
            receiver_id:
              type: object
              message_body:
                type: string
        read_status:
          type: string
        created_at:
          type: string
          format: date-time